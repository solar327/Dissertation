model flow_formulation
  uses  "mmxprs", "mmsheet","mmquad","mmsystem"

filename := "oddwheel.dat"

declarations
  NNODES: integer
  NTERMINALS: integer         ! Number of steiner nodes(nodes-terminals)
end-declarations

initialisations from filename
  NNODES
  NTERMINALS
end-initialisations

declarations
  nodes=1..NNODES
  terminals={1,3,5,7}
  root={1}
  r_1={3,5,7}!Steiner points:NNODES-NTERMINALS

  c:array(nodes,nodes) of real
  !T:array(terminals) of real
  !z:array(terminals) of real

  arcs:dynamic array (nodes,nodes) of boolean
  !z:dynamic array(terminals) of boolean

  x:array(nodes,nodes) of mpvar
  y:array(nodes,nodes,terminals) of mpvar

end-declarations

initialisations from filename
  arcs
end-initialisations

!declarations
 !MinCost, Profit:linctr
!end-declarations

declarations
 Profit:qexp
end-declarations


initializations from "mmsheet.xlsx:Odd_Wheel.xlsx"

  c as "[COST$A3:C51]"
  !z as "[Terminals$A3:B6]"

end-initializations

!Objective function
cost:=sum(i,j in nodes|exists(arcs(i,j)))c(i,j)*x(i,j)

!Constraints
!Flow
!forall(i,j in num_nodes, t in num_terminals|) do
  !sum(i in num_nodes,j in num_nodes,t in num_terminals|i=z(t))y(i,j,t)-sum(i,j in num_nodes,t in num_terminals|i=z(t))y(j,i,t)=1
!end-do

!forall(i,j in num_nodes, t in num_terminals|i<>z(t)) do
  !sum(i,j in num_nodes,t in num_terminals)y(i,j,t)-sum(i,j in num_nodes,t in num_terminals)y(j,i,t)=0
!end-do

forall(i in nodes,t in r_1)
  if i=t then
  sum(j in nodes|exists(arcs(j,i)))y(j,i,t)-sum(j in nodes|exists(arcs(i,j)))y(i,j,t)=1
  elif i=1 then
  sum(j in nodes|exists(arcs(j,i)))y(j,i,t)-sum(j in nodes|exists(arcs(i,j)))y(i,j,t)=-1
  else
  sum(j in nodes|exists(arcs(j,i)))y(j,i,t)-sum(j in nodes|exists(arcs(i,j)))y(i,j,t)=0
  end-if

!capacity constraint
forall(i,j in nodes,t in terminals|exists(arcs(i,j))) do
  x(i,j)>=y(i,j,t)
end-do

!quantitu constraint
forall(i,j in nodes,t in terminals|exists(arcs(i,j))) do
  y(i,j,t)>=0
end-do

!binary constraints
forall(i,j in nodes|exists(arcs(i,j))) do
  x(i,j) is_binary
end-do

start_time := gettime
minimise(cost)
end_time := gettime
writeln("Time: ", end_time-start_time, " seconds")

!int exportprob (XPRMcontext ctx, const char "", const char flow_formulation.lp, XPRMlinctr obj);

case getprobstat of
   XPRS_OPT: status:="Optimum found"
   XPRS_UNF: status:="Unfinished"
   XPRS_INF: status:="Infeasible"
   XPRS_UNB: status:="Unbounded"
   XPRS_OTH: status:="Failed"
else status:="???"
end-case

exportprob(0, "", Profit)
exportprob(EP_MIN, "flow_formulation.lp", Profit)

writeln("Problem status:",status)
writeln("smt: ",getsol(cost))

end-model

